# -*- python -*-
# ex: set syntax=python:

# Extend paths to allow loading zorg and config modules.
import os, sys
path = os.path.join(os.environ.get('HOME'), 'zorg', 'buildbot', 'chapuni', 'master')
if path not in sys.path:
  sys.path.append(path)
path = os.path.join(os.environ.get('HOME'), 'zorg')
if path not in sys.path:
  sys.path.append(path)

# This is the dictionary that the buildmaster pays attention to. We also use
# a shorter alias to save typing.
c = BuildmasterConfig = {}

import config

# Reload stuff automatically.
#
# FIXME: Find better way.
reload(config.slaves)
reload(config.builders)
reload(config.status)
reload(config)

####### BUILDSLAVES

c['slaves'] = config.slaves.get_build_slaves()
c['slavePortnum'] = 9990

####### CHANGESOURCES

# bb.pgr.jp accepts push from llvm-project.git constructor.

####### BUILDERS

c['builders'] = builders = list(config.builders.get_builders())

####### STATUS TARGETS

# Schedule builds and email for all non-experimental builders.
# standard_builders = [b['name'] for b in builders
#                      if not b['category'].endswith('.exp')]
standard_builders = builders
c['status'] = config.status.get_status_targets(standard_builders)

####### RESOURCE USAGE

# Use gzip instead of bz2, to reduce server load.
c['logCompressionMethod'] = 'gz'

####### SCHEDULERS

from buildbot.scheduler import Scheduler

from buildbot.changes.filter import ChangeFilter

import re

def filter_t(l, e): return filter(lambda x: re.search(e, x), l)
def filter_f(l, e): return filter(lambda x: not re.search(e, x), l)

def Tllvm(l): return filter_t(l, r'^llvm/')
def Tclang(l): return filter_t(l, r'^clang/')
def Tcmake(l):
    return filter_t(l, r'^llvm/cmake/') + filter_t(l, r'/CMakeLists.txt$')
def Tllvmlib(l):
    return filter_t(l, r'^llvm/(include|lib|tools|utils)/')
def Fllvmtest(l): return filter_f(l, r'^llvm/test/.+/')
def Fhtml(l): return filter_f(l, r'\.html$')

def filter_llvm(change):
    return len(Tllvm(getattr(change, "files"))) > 0

change_llvm = ChangeFilter(filter_fn = filter_llvm)

def filter_cmake_llvm(change):
    return len(Fhtml(Tllvm(getattr(change, "files")))) > 0

change_llvm_master = ChangeFilter(filter_fn = filter_cmake_llvm,
                                  branch=['master'])

def filter_llvmclang(change):
    l = getattr(change, "files")
    return len(Tclang(l) + Tllvm(l)) > 0

def filter_cmake_llvmclang(change):
    l = getattr(change, "files")
    l = Tclang(l) + Tllvm(l)
    if len(Tcmake(l)) > 0:
        return True
    return len(Fllvmtest(Fhtml(l))) > 0

change_llvmclang = ChangeFilter(filter_fn = filter_llvmclang)

change_llvmclang_master = ChangeFilter(filter_fn = filter_cmake_llvmclang,
                                       branch=['master'])

# Configure the Schedulers, which decide how to react to incoming changes.  In this
# case, just kick off a 'runtests' build

from buildbot.schedulers.triggerable import Triggerable
from buildbot.steps.trigger import Trigger

from buildbot.schedulers.basic import SingleBranchScheduler
from buildbot.schedulers.basic import AnyBranchScheduler
c['schedulers'] = []
c['schedulers'].append(AnyBranchScheduler(
                            name="quick-clang",
                            change_filter = change_llvmclang_master,
                            treeStableTimer=None,
                            builderNames=["cmake-clang-x86_64-linux"]))
c['schedulers'].append(AnyBranchScheduler(
                            name="notquick",
                            change_filter = change_llvmclang,
                            treeStableTimer=30,
                            builderNames=["cmake-clang-i686-msvc10"]))
c['schedulers'].append(AnyBranchScheduler(
                            name="quick-llvm",
                            change_filter = change_llvm_master,
                            treeStableTimer=None,
                            builderNames=["cmake-llvm-x86_64-linux"]))
# c['schedulers'].append(AnyBranchScheduler(
#                             name="quick-clang",
#                             change_filter = change_clang,
#                             treeStableTimer=None,
#                             builderNames=["sa-clang-x86_64-linux"]))

c['schedulers'].append(AnyBranchScheduler(
                            name="stable",
                            change_filter = change_llvmclang,
                            treeStableTimer=600,
                            builderNames=["cmake-clang-i686-msys",
                                          "clang-i686-msys",
                                          "clang-i686-cygwin",
                                          "clang-ppc-linux",
                                          "clang-3stage-x86_64-linux",
                                          ]))

c['mergeRequests'] = False;

# c['schedulers'].append(Triggerable(name="cmake-llvm-x86_64-linux",
#                                    builderNames=["cmake-llvm-x86_64-linux"],
#                                    properties={'triggered': '1'}))
# c['schedulers'].append(Triggerable(name="sa-clang-x86_64-linux",
#                                    builderNames=["sa-clang-x86_64-linux"],
#                                    properties={'triggered': '1'}))

####### PROJECT IDENTITY

c['title'] = "LLVM"
c['titleURL'] = "http://llvm.org/"
c['buildbotURL'] = "http://bb.pgr.jp/"

####### DB URL

c['db_url'] = "sqlite:///state.sqlite"
